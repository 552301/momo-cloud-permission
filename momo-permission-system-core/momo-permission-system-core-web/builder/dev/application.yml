
server:
  port: ${momo.port}
  undertow:
    io-threads: 16 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    worker-threads: 256 # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载 当执行类似servlet请求阻塞IO操作会从这个线程池中取得线程，默认值是IO线程数*8
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024 #设置buffer大小，这些buffer会用于服务器连接的IO操作，有点类似netty的池化内存管理
    direct-buffers: true #是否分配的直接内存(NIO直接分配的堆外内存)
eureka:
  instance:
    metadata-map:
      user.name: ${momo.security.name}
      user.password: ${momo.security.password}
    hostname: ${momo.ip}
    ip-address: ${momo.ipAddress}
    health-check-url-path: /actuator/health
    preferIpAddress: true
    instance-id: ${momo.application}:${spring.cloud.client.ip-address}:${momo.port}
    lease-renewal-interval-in-seconds: 30 # 该配置指示eureka客户端需要向eureka服务器发送心跳的频率  (Spring Cloud默认该配置是 30s)
    lease-expiration-duration-in-seconds: 90 # 该配置指示eureka服务器在接收到最后一个心跳之后等待的时间，然后才能从列表中删除此实例 (Spring Cloud默认该配置是 90s)
  client:
    register-with-eureka: true #表示是否注册自身到eureka服务器 集群情况下 是需要改成true 的因为 集群是注册中心 相互注册自己 同步服务
    fetch-registry: true  #是否从eureka上获取注册信息 集群情况下需要为true的  因为 会在别的注册中心 获取服务
    registry-fetch-interval-seconds: 10 #client间隔多久去拉取服务注册信息，默认为30秒，对于api-gateway，如果要迅速获取服务注册状态，可以缩小该值，比如5秒
    service-url: #（集群时指定另外一个注册中心地址）
      defaultZone: http://${momo.security.name}:${momo.security.password}@${momo.ip}:${momo.eureka-port}/eureka/
#      defaultZone: http://${momo.security.name}:${momo.security.password}@${momo.ip}:${momo.eureka-port}:8761/eureka/,http://${momo.security.name}:${momo.security.password}@${momo.ip}:${momo.eureka-port}:8762/eureka/,http://${momo.security.name}:${momo.security.password}@${momo.ip}:${momo.eureka-port}:8763/eureka/
spring:
  application:
    name: ${momo.application}
  http:
    encoding:
      force: true
      charset: utf-8
      enabled: true
  security:
    user:
      name: ${momo.security.name}  # 用户名
      password: ${momo.security.password}   # 用户密码
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 123456
    type: com.zaxxer.hikari.HikariDataSource
    jdbc-url: jdbc:mysql://127.0.0.1:3306/permission-core?useSSL=false&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8&autoReconnect=true&rewriteBatchedStatements=TRUE&allowMultiQueries=true
    continue-on-error: true
    # 下面为连接池的补充设置，应用到上面所有数据源中
    hikari:
      auto-commit: true #此属性控制从池返回的连接的默认自动提交行为,默认值：true
      idle-timeout: 180000 #空闲连接存活最大时间，默认600000（10分钟）
      pool-name: DatebookHikariCP #连接池名称
      max-lifetime: 18000000 #此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
      connection-timeout: 30000 #<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
      minimum-idle: 5 #最小空闲连接数量
      maximum-pool-size: 100 #连接池最大连接数，默认是10
      connection-test-query: select 1
  redis:
    host: 127.0.0.1
    password:
    port: 6379
    database: 0
    timeout: 300000
    #    cluster:
    #      nodes: 127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384,127.0.0.1:6385
    #      max-redirects: 3
    lettuce:
      shutdown-timeout: 100
      pool:
        max-active: 50 # 连接池最大连接数（使用负值表示没有限制） 默认 8
        max-idle: 20 # 连接池中的最大空闲连接 默认 8
        max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
        min-idle: 20 # 连接池中的最小空闲连接 默认 0
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1
  zipkin:
    base-url: http://127.0.0.1:9411
    enabled: true
    sender:
      type: web
logging:
  level:
    com.momo.cloudspringserver.feign.FeignService: info

# ribbon重试
cloud-spring-order:
  ribbon:
    #配置负载均衡策略
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule #  默认规则，符合判断server所在区域的性能和server的可用性选择服务器
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule # 轮询
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #  随机
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #  先按照RoundRobinRule的策略获取服务，如果获取失败则在制定时间内进行重试，获取可用的服务。
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #  根据平均响应的时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高，刚启动时如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够会切换到WeightedResponseTimeRule
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.AvailabilityFilteringRule #  会先过滤由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问

    ReadTimeout: 3000
    ConnectTimeout: 500
    MaxAutoRetries: 0 #同一台实例最大重试次数,不包括首次调用
    MaxAutoRetriesNextServer: 3 #重试负载均衡其他的实例最大重试次数,不包括首次调用
    OkToRetryOnAllOperations: true  #是否所有操作都重试
    eureka:
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

# Netty相关配置
#不能用localhost,否则启动报异常:Unresolved address
#tcp监听的端口
netty:
  tcp:
    port: 502
  # bossGroup的线程数
  boss: #worker.threads>boss.threads
    thread: # 1-4 用来accept的处理
      count: 4
  # worker的线程数
  worker:
    thread: #cpu核数*2
      count: 2
  #是否使用长连接
  so:
    keepalive: true #一般对终端设备，我看很多人的推荐是关掉，不是true  Socket参数，连接保活，默认值为False。启用该功能时，TCP会主动探测空闲连接的有效性。可以将此功能视为TCP的心跳机制#需要注意的是：默认的心跳间隔是7200s即2小时。Netty默认关闭该功能
    backlog: 5 # 半连接队列最大值 client连接有很多时，server.boss(accept)处理不过来时，堆在队列等待accept处理的数量值 Socket参数，服务端接受连接的队列长度，如果队列已满，客户端连接将被拒绝
wx:
  mp:
    configs:
      - appId: wxc98a16f59fd4081b #（一个公众号的appid）
        secret: c094c543efccd63dec1501cf60d00d90 #（公众号的appsecret）
        token: e3a1b83d6a794192850b2ae68ae35239 #（接口配置里的Token值）
        aesKey: cIUOrNiwF2trY6vN0CCw450mDnnIpvaFsZhYnN4TpBz #（接口配置里的EncodingAESKey值）
      - appId: wx6ad144e54af67d87 #（一个公众号的appid）
        secret: 91a2ff6d38a2bbccfb7e9f9079108e2e #（公众号的appsecret）
        token:  #（接口配置里的Token值）
        aesKey:  #（接口配置里的EncodingAESKey值）

wechat:
  open:
    componentAppId: wxc98a16f59fd4081b
    componentSecret: c094c543efccd63dec1501cf60d00d90
    componentToken:
    componentAesKey:

#################   cloud 初始化参数   ############################
momo:
  application: momo-permission-system-core #应用名
  port: 9090 #项目端口号
  ip: 127.0.0.1 #注册中心ip地址
  ipAddress: 127.0.0.1 #解决外网环境下，注册中心ip问题
  #  ip: localhost #注册中心ip地址
  eureka-port: 8761 #注册中心端口号
  security:
    name: kagome # 用户名
    password: kagome123456 #密码
  #超级管理员租户信息
  teantId: 1
  #系统初始化超级管理员
  superAdmins: #List
    - 15050451502
    - momo
#################  cloud 项目初始化参数 end  ############################